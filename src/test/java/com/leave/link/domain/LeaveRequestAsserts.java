package com.leave.link.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeaveRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveRequestAllPropertiesEquals(LeaveRequest expected, LeaveRequest actual) {
        assertLeaveRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertLeaveRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveRequestAllUpdatablePropertiesEquals(LeaveRequest expected, LeaveRequest actual) {
        assertLeaveRequestUpdatableFieldsEquals(expected, actual);
        assertLeaveRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveRequestAutoGeneratedPropertiesEquals(LeaveRequest expected, LeaveRequest actual) {
        assertThat(expected)
            .as("Verify LeaveRequest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveRequestUpdatableFieldsEquals(LeaveRequest expected, LeaveRequest actual) {
        assertThat(expected)
            .as("Verify LeaveRequest relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getFromDate()).as("check fromDate").isEqualTo(actual.getFromDate()))
            .satisfies(e -> assertThat(e.getToDate()).as("check toDate").isEqualTo(actual.getToDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getChangedAt()).as("check changedAt").isEqualTo(actual.getChangedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveRequestUpdatableRelationshipsEquals(LeaveRequest expected, LeaveRequest actual) {}
}
